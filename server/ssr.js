import express from "express";
import React from "react";
import ReactDOMServer from "react-dom/server";
import serialize from 'serialize-javascript'
import { matchPath, StaticRouter } from "react-router";
import App from "../src/App";
import path from 'path'
import fs from "fs";
import { ChunkExtractor } from '@loadable/server'
import routes from "../src/routes";
import { Helmet } from "react-helmet";

const router = express.Router()

// This is the stats file generated by webpack loadable plugin
const statsFile = path.resolve(__dirname, '..', 'dist/loadable-stats.json')
// We create an extractor from the statsFile
const extractor = new ChunkExtractor({ statsFile })
// Wrap your application using "collectChunks"

router.get("*", async (req, res, next) => {
    const currentRoute = routes.find(route => matchPath(req.url, route))
    const requestInitialData = currentRoute?.component?.requestInitialData?.()

    try {
        const initialData = await Promise.resolve(requestInitialData)

        let context = { initialData: initialData ?? null }

        let markup = ReactDOMServer.renderToString(
            extractor.collectChunks(
                <StaticRouter context={context} location={req.url}>
                    <App />
                </StaticRouter>
            )
        )
        // You can now collect your script tags
        const scriptTags = extractor.getScriptTags() // or extractor.getScriptElements();
        // You can also collect your "preload/prefetch" links
        const linkTags = extractor.getLinkTags() // or extractor.getLinkElements();
        // And you can even collect your style tags (if you use "mini-css-extract-plugin")
        const styleTags = extractor.getStyleTags() // or extractor.getStyleElements();

        const head = Helmet.renderStatic()

        const html = `<html lang="en">
            <head>
                ${head.title.toString()}
                ${head.meta.toString()}
                ${styleTags}
                ${linkTags}
                ${scriptTags}
                <script>window.__initialData__=${serialize(initialData)}</script>
            </head>
            <body>
                <div id="app">${markup}</div>
            </body>
            </html>`

        res.write(html)
        res.end()
    } catch (error) {
        res.status(500).end("something happend " + error.stack)
    }
});



export default router

function readFile(filepath) {
    return new Promise((resolve, reject) => {
        fs.readFile(path.resolve(filepath), "utf-8", (err, data) => {
            if (err) {
                return reject(err)
            }
            return resolve(data)
        });
    })
}
